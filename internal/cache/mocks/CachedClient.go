// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CachedClient is an autogenerated mock type for the CachedClient type
type CachedClient struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *CachedClient) Close() {
	_m.Called()
}

// GetRobotsFile provides a mock function with given fields: _a0
func (_m *CachedClient) GetRobotsFile(_a0 string) ([]byte, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRobotsFile")
	}

	var r0 []byte
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]byte, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SaveRobotsFile provides a mock function with given fields: _a0, _a1
func (_m *CachedClient) SaveRobotsFile(_a0 string, _a1 []byte) {
	_m.Called(_a0, _a1)
}

// NewCachedClient creates a new instance of CachedClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCachedClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CachedClient {
	mock := &CachedClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
