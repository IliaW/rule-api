// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	model "github.com/IliaW/rule-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RuleStorage is an autogenerated mock type for the RuleStorage type
type RuleStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *RuleStorage) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: _a0
func (_m *RuleStorage) GetById(_a0 string) (*model.Rule, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Rule, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Rule); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUrl provides a mock function with given fields: _a0
func (_m *RuleStorage) GetByUrl(_a0 string) (*model.Rule, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetByUrl")
	}

	var r0 *model.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Rule, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Rule); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *RuleStorage) Save(_a0 *model.Rule) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Rule) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Rule) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Rule) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *RuleStorage) Update(_a0 *model.Rule) (*model.Rule, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Rule) (*model.Rule, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Rule) *model.Rule); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Rule) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRuleStorage creates a new instance of RuleStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuleStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuleStorage {
	mock := &RuleStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
